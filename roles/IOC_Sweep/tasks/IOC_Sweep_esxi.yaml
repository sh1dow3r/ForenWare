---

- name: get the username running the deploy
  become: false
  local_action: command whoami
  register: username_on_the_host
  delegate_to: localhost

- name: Ensure directory for storing collected files exists
  ansible.builtin.file:
    path: "{{ playbook_dir }}/{{ ForenDataDirName }}"
    state: directory
    owner: "{{ username_on_the_host.stdout }}"
    group: "{{ username_on_the_host.stdout }}"
    mode: '0755'
  delegate_to: localhost

- name: Ensure directory for the mount point exists
  ansible.builtin.file:
    path: "{{ playbook_dir }}/{{ ForenDataDirName }}/ioc_sweep_mount_point"
    state: directory
    owner: "{{ username_on_the_host.stdout }}"
    group: "{{ username_on_the_host.stdout }}"
    mode: '0755'
  delegate_to: localhost


- name: Ensure directory for the ioc sweep results  exists
  ansible.builtin.file:
    path: "{{ playbook_dir }}/{{ ForenDataDirName }}/ioc_sweep_results"
    state: directory
    owner: "{{ username_on_the_host.stdout }}"
    group: "{{ username_on_the_host.stdout }}"
    mode: '0755'
  delegate_to: localhost

- name: Define ioc_sweep_mount_point path
  set_fact:
    ioc_sweep_mount_point: "{{ playbook_dir }}/{{ ForenDataDirName }}/ioc_sweep_mount_point"

- name: Define thor-lite path
  set_fact:
    thor_path: "{{ playbook_dir }}/tools/thor"

- name: Mount ESXi filesystem using SSHFS
  ansible.builtin.shell:
    cmd: "sudo sshfs -o reconnect root@{{ esxi_hostname }}:/ '{{ ioc_sweep_mount_point }}' "
  ignore_errors: yes  # ignore if already monuted
  delegate_to: localhost


- name: Run THOR Lite scan on the mounted ESXi filesystem
  ansible.builtin.shell:
    cmd: "{{ thor_path }}/thor-lite-linux-64 -a FileScan --alldrives -p '{{ ioc_sweep_mount_point }}' --intense --rebase-dir '{{ ioc_sweep_mount_point }}'"
  register: thor_scan_result
  delegate_to: localhost

