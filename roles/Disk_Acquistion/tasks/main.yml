---

- name: get folder path for vm
  community.vmware.vmware_guest_find:
    hostname: "{{ vcenter_hostname }}"
    username: "{{ vcenter_username }}"
    password: "{{ vcenter_password }}"
    validate_certs: "{{ CERT_VALIDATION }}"
    name: "{{ item }}"
  delegate_to: localhost
  register: vm_folder
  loop: "{{ compromised_VM_names }}"

- name: Get power_state from the compromised VM
  block:
    - name: Get virtual machine info
      community.vmware.vmware_vm_info:
        hostname: '{{ vcenter_hostname }}'
        username: '{{ vcenter_username }}'
        password: '{{ vcenter_password }}'
        folder: "{{ vm_folder.results[0].folders[0] }}" # change vm_folder.results[<1>].folders[0] to get the next one
        validate_certs: "{{ CERT_VALIDATION }}"
      delegate_to: localhost
      register: vm_info

      
    - debug:
        msg: "{{ item.power_state }}"
      with_items:
        - "{{ vm_info.virtual_machines | json_query(query) }}"
      vars:
          query: "[?guest_name=='{{ compromised_VM_names[0] }}']"
      register: vm_status

- name: print vm_stat
  debug:
    msg: "{{ vm_status.results[0].msg }}"

- name: ASK user to shutdown the VM
  pause: 
    prompt: "VM is running, Can't extract the vmdk. Would you like me to shut it down? Press return to continue. 
    \nTo Cancel Press Ctrl+c and then 'a' to abort"
  delegate_to: localhost
  when: vm_status.results[0].msg == 'poweredOn'

- name: shut down the vm
  community.vmware.vmware_guest_powerstate:
    hostname: "{{ vcenter_hostname }}"
    username: "{{ vcenter_username }}"
    password: "{{ vcenter_password }}"
    validate_certs: "{{ CERT_VALIDATION }}"
    folder: "{{ vm_folder.results[0].folders[0] }}"
    name: "{{ compromised_VM_names[0] }}"
    state: powered-off
  delegate_to: localhost
  register: deploy
  

- name: Make directory for compromised VMs
  file:
    path: "{{ playbook_dir }}/{{ ForenDataDirName }}"
    state: directory
    mode: '0755'

- name: Make directory for compromised VMs
  file:
    path: "{{ playbook_dir }}/{{ ForenDataDirName }}/Disks"
    state: directory
    mode: '0755'

- name: Export VMDK and extra data
  community.vmware.vmware_export_ovf:
    validate_certs: false
    hostname: '{{ vcenter_hostname }}'
    username: '{{ vcenter_username }}'
    password: '{{ vcenter_password }}'
    name: '{{ item }}' 
    export_with_images: false
    export_dir: "{{ playbook_dir }}/{{ ForenDataDirName }}/Disks"
  delegate_to: localhost
  loop: '{{ compromised_VM_names }}'




# TODO: find a way to get the vmdk without shuting off the vm

# - name: get folder path for vm
#   community.vmware.vmware_guest_find:
#     hostname: "{{ vcenter_hostname }}"
#     username: "{{ vcenter_username }}"
#     password: "{{ vcenter_password }}"
#     validate_certs: no
#     name: "{{ compromised_VM_name }}"
#   delegate_to: localhost
#   register: vm_folder

# - name: get uuid form name
#   community.vmware.vmware_guest_facts:
#     hostname: "{{ vcenter_hostname }}"
#     username: "{{ vcenter_username }}"
#     password: "{{ vcenter_password }}"
#     datacenter: "{{ vcenter_datacenter }} "
#     validate_certs: no
#     name: "{{ compromised_VM_name }}"
#     folder: "{{ vm_folder.folders[0] }}"
#   delegate_to: localhost
#   register: vm_facts


# - name: set vm_uuid 
#   set_fact:
#     vm_uuid: "{{ vm_facts.instance.instance_uuid }}"

# - name: print uuid 
#   debug:
#     msg: "instance id: {{ vm_uuid }}"

# - name: Query a file on a datastore
#   community.vmware.vsphere_file:
#     host: '{{ vcenter_hostname }}'
#     username: '{{ vcenter_username }}'
#     password: '{{ vcenter_password }}'
#     datacenter: '{{ vcenter_datacenter }}'
#     datastore: '{{ item }}'
#     path: "{{ compromised_VM_name }}"
#     state: file
#     validate_certs: "{{ CERT_VALIDATION }}"
#   delegate_to: localhost
#   ignore_errors: yes
#   register: file_path_result
#   loop: '{{ vcenter_datastores }}'



# - name: get file status and url
#   debug:
#     var: item
#     verbosity: 3
#   loop: "{{ file_path_result | json_query( url_status_query ) }}"
#   vars:
#     url_status_query: "results[*].{status: status, url: url}"
#   register: status_url_result

# - name: get url only
#   debug:
#     var: item
#     verbosity: 1
#   loop: "{{ status_url_result | json_query( url_query ) }}"
#   vars:
#     url_query: "results[?item.status == `200`]"
#   register: url_result

# - name: set vmdk_url value
#   set_fact:
#     vmdk_url:  '{{ url_result.results[0].item.item.url }}'


# - name: get vmdk 
#   script: "{{ role_path }}/library/main.py -i '{{ vm_uuid }}' -w '{{ playbook_dir }}' -s '{{ vcenter_hostname }}' -u '{{ vcenter_username }}' -p '{{ vcenter_password }}' "
#   args:
#    executable: python3

# does not work
# - name: Fetch a file from datastore
#   get_url:
#     url: "{{ vmdk_url }}"
#     username: "{{ vcenter_username }}"
#     password: "{{ vcenter_password }}"
#     validate_certs: "{{ CERT_VALIDATION }}"
#     dest: ./{{ compromised_VM_name }}.vmdk
