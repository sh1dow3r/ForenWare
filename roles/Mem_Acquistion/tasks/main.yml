---
- name: Query a the vmem snapshot on a datastore
  community.vmware.vsphere_file:
    host: '{{ vcenter_hostname }}'
    username: '{{ vcenter_username }}'
    password: '{{ vcenter_password }}'
    datacenter: '{{ vcenter_datacenter }}'
    datastore: '{{ item[0] }}'
    path: "{{ item[1] }}/{{ item[1] }}-Snapshot{{ item[2] }}.vmem"
    state: file
    validate_certs: "{{ CERT_VALIDATION }}"
  delegate_to: localhost
  ignore_errors: yes
  register: file_path_result
  with_nested:
    - '{{ vcenter_datastores }}'
    - "{{ compromised_VM_names }}"
    - ['1', '2', '3', '4','5']

- name: get file status and url
  debug:
    var: item
    verbosity: 3
  loop: "{{ file_path_result | json_query( url_status_query ) }}"
  vars:
    url_status_query: "results[*].{status: status, url: url}"
  register: status_url_result

- name: print the thinhg
  debug:
    var: status_url_result

- name: get url only
  debug:
    var: item
    verbosity: 3
  loop: "{{ status_url_result | json_query( url_query ) }}"
  vars:
    url_query: "results[?item.status == `200`]"
  register: url_result

- name: print the url_result0
  set_fact:
    vmem_url: "{{ url_result.results | last }}"

- name: Make directory for compromised VMs
  file:
    path: "{{ playbook_dir }}/{{ ForenDataDirName }}"
    state: directory
    mode: '0755'

- name: print the thing
  debug:
    msg: "{{ vmem_url.item.item.url }}"

- name: Make directory for compromised VMs
  file:
    path: "{{ playbook_dir }}/{{ ForenDataDirName }}/Memory"
    state: directory
    mode: '0755'

- name: Fetch a the vmem from vCenter
  get_url:
    url: "{{ vmem_url.item.item.url }}"
    username: "{{ vcenter_username }}"
    password: "{{ vcenter_password }}"
    validate_certs: "{{ CERT_VALIDATION }}"
    dest: '{{ playbook_dir }}/{{ ForenDataDirName }}/Memory/{{ item[0] }}.vmem'
  with_nested:
    - "{{ compromised_VM_names }}"
    